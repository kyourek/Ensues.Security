using System;
using System.Security.Cryptography;
using System.Text;

namespace Ensues.Security.Cryptography {
    /// <summary>
    /// Generate a cryptographically secure random password.
    /// </summary>
    public class PasswordGenerator {
        private static int Random(byte[] fourBytes, RandomNumberGenerator rng, int min, int max) {
            if (null == rng) throw new ArgumentNullException("rng");
            var scale = uint.MaxValue;
            while (scale == uint.MaxValue) {
                // Get four random bytes.
                rng.GetBytes(fourBytes);

                // Convert that into an uint.
                scale = BitConverter.ToUInt32(fourBytes, 0);
            }

            // Add min to the scaled difference between max and min.
            return (int)(min + (max - min) * (scale / (double)uint.MaxValue));
        }

        /// <summary>
        /// Get or set the string in which each character is a potential symbol
        /// in the passwords generated by this instance.
        /// </summary>
        /// <exception cref="ArgumentNullException">
        /// The value cannot be <c>null</c>.
        /// </exception>
        /// <exception cref="ArgumentException">
        /// The value cannot be empty.
        /// </exception>
        public string Symbols {
            get { return _Symbols; }
            set {
                if (null == value) throw new ArgumentNullException("Symbols");
                if ("" == value) throw new ArgumentException("The value cannot be empty.", "Symbols");
                _Symbols = value; 
            }
        }
        private string _Symbols = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        /// <summary>
        /// Get or set the length of the password that is
        /// generated by this generator.
        /// </summary>
        /// <exception cref="ArgumentOutOfRangeException">
        /// The value cannot be less than zero.
        /// </exception>
        public int Length {
            get { return _Length; }
            set {
                if (0 > value) throw new ArgumentOutOfRangeException("Length", value, "The value cannot be less than zero.");
                _Length = value; 
            }
        }
        private int _Length = 10;

        /// <summary>
        /// Creates a new instance of the <see cref="T:PasswordGenerator"/>.
        /// </summary>
        public PasswordGenerator() {
        }

        /// <summary>
        /// Generate a cryptographically secure random password.
        /// </summary>
        /// <returns>
        /// A random password with length <see cref="PasswordGenerator.Length"/>.
        /// </returns>
        public string Generate() {
            var length = Length;
            var symbols = Symbols;
            var maxSymbol = symbols.Length - 1;
            var fourBytes = new byte[4];
            var stringBuilder = new StringBuilder(length);
            using (var rng = RandomNumberGenerator.Create()) {
                for (var i = 0; i < length; i++) {
                    var random = Random(fourBytes, rng, 0, maxSymbol);
                    var symbol = symbols[random];
                    stringBuilder.Append(symbol);
                }
            }
            return stringBuilder.ToString();
        }
    }
}
